(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    122466,       2610]
NotebookOptionsPosition[    119573,       2505]
NotebookOutlinePosition[    119932,       2521]
CellTagsIndexPosition[    119889,       2518]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Infinite Rod, Isotropic Point Source, Isotropic Scattering", "Title",
 CellChangeTimes->{{3.61742787362737*^9, 3.617427885266508*^9}}],

Cell[TextData[{
 "This is code to accompany the book:\n",
 StyleBox["A Hitchhiker\[CloseCurlyQuote]s Guide to Multiple Scattering\n", 
  "Subchapter"],
 StyleBox["\[Copyright] 2016", "Subsection"],
 StyleBox[" ", "Section"],
 StyleBox["Eugene d\[CloseCurlyQuote]Eon \nwww.eugenedeon.com", "Subsection"]
}], "Text",
 CellChangeTimes->{{3.6174286022468777`*^9, 3.617428710592918*^9}, 
   3.645060526514143*^9, {3.663892804398519*^9, 3.663892804484825*^9}}],

Cell[CellGroupData[{

Cell["Path Setup", "Section",
 CellChangeTimes->{{3.640928920990849*^9, 3.64092892141395*^9}, {
  3.640928986491934*^9, 3.640928986905283*^9}}],

Cell["\<\
Put a file at ~/.hitchhikerpath with the path to your hitchhiker repo so that \
these worksheets can find the MC data from the C++ simulations for \
verification\
\>", "Text",
 CellChangeTimes->{{3.640928926126832*^9, 3.6409289600754013`*^9}}],

Cell[BoxData[
 RowBox[{"SetDirectory", "[", 
  RowBox[{"Import", "[", "\"\<~/.hitchhikerpath\>\"", "]"}], "]"}]], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Exponential random flight", "Chapter",
 CellChangeTimes->{{3.617427887473928*^9, 3.6174278904581738`*^9}}],

Cell[CellGroupData[{

Cell["Notation", "Section",
 CellChangeTimes->{{3.617428538130481*^9, 3.617428538753331*^9}}],

Cell["\<\
\[Alpha] - single-scattering albedo
\[CapitalSigma]t - extinction coefficient
x - position coordinate in rod (source at x = 0)\
\>", "Text",
 CellChangeTimes->{{3.617428487341361*^9, 3.617428516514864*^9}}],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJztvfmXZVd5JejV3T/0v1C9VvVa/ZMxHrAxLlMeq2yX7aqyLQE24AmDRiSM
scEN2OWywbhwQ1kCJNA8zwMziFlITBJiyIwhM+aIF3NkRGQCAiMhgeS+7917
zrf3/r5zIyQyK4R1jo/fuu8pyeHFvefss7+99/f/nPGq55/zv/3QD/3Qa/7P
5uX5L3vdf3z1q1/2Vy/4P5o3v/JXf3n2Gf97c/Fnzf//QnMxvP4XGo+f7FlH
HXXUUUcdddTx9BynFClVzFZHHXXUUUcdddRxUsapw0snHbBVzFZHHXXUUUcd
dTxtx6mDTBWz1VFHHXXUUUcddZyscepQ06nAbBW21VFHHXXUUUcdT89x6lBT
xWx11FFHHXXUUUcdJ2ucOuBUMVsdddRRRx111FHHyRqnCDtVwFZHHXXUUUcd
ddRxEscpQlAVrdVRRx111FFHHXWcxPHUx2x11FFHHXXUUUcddZwiQFUBWx11
1FFHHXXUUcfJGqcOVlXAVkcdddRRRx111HGyxilCVpVkq6OOOuqoo4466jiJ
4xSBqwrY6qijjjrqqKOOOk7iOFmY7fFT8NvWUUcdddRRRx111PEvJxWwVcxW
Rx111FFHHXXUcYrGycVsj5+C37mOOuqoo4466qjjaT5OOmA7FZitwrY66qij
jjrqqOPpPE4FYMsQ69RBwTrqqKOOOuqoo46n1fjBwmwVttVRRx111FFHHU/D
ceoA26nDbBW51VFHHXXUUUcdT7dxSjHbqZ511FFHHXXUUUcdT5Nx4LirwrY6
6qijjjrqqKOOPceBg67va25vHxuro4466qijjjrq+Nc+VldXDxx3fZ/z2muv
+b/+zb+ps84666yzzjrr/Fc8/+9/+28PHz504Ljr+5z33Pvpy6+4fDQvG832
4vIrug/14gobl1/RvR2+Xnll96lcNK/xvMpfXNm92rwiv16VPoSLZrSvediH
V1/dfdRcXA0Xw9dwXnN1fNG82rS311x7Tb64pnltL65tX/O0t9c2+DhdDC/t
4trrrg3GddfZxXDmi9K8/jq7uP7a0Wwvrrt+NK/jef1w2MX1dnH9DaMp44Yb
ug+HFzJvHE398Ibuw+EFzRuHI193rzd2I1/ceFN6vemm0czX+ZPSvPmm4czX
o9eb2w9HF928pXu95Zabm5ne3ty+pg+7i9G8pX29dTTbt+3F8JNbu8/pojxv
u+1WuxjO7uK2wrz9ttvyxej6ttvzvH00b+OZP7xd5x133N7MfJ0/Kc0777ij
mfk6f1Kcd45mvh69vvvOO9vP7WJ4NXztm+0vuPPO/Ou7/8md9jvHf6Kb+PfH
C5z4VfjvjeZt8J3z948/I/zByby1vQHwNui9YW69heett+R7D0a+UW/Jd+/w
xk43c3eH3wL3f7rnR09Hfl5uvNmeoPKDNnoSb4QHMz+2/nG+EZ53uMjrw+hC
lo4bumUnX8tCJEtTu3xdB6vZdfHSd123Nsqy2b/AumU5GtfAVbvaX8MXV9PW
MNw1uk9kl7mGdhy3MV0DOxdsarLfyQ7Y7oztHtq+vTJ9gjPvsLAppwvcr92M
YcAVOC6HqwBd6Lz8MrrGecVl+snllzUDr9O4FK+bm+zBB79x4Ljr+5nf+c7D
4+NjY+Nj4xPjMicm29eJZqZPmuvxCbumOXmkfZ1sZvqkuZ6YtOvJI6PX7vpo
+3qkmemT5po+Pzqa3fVU+3q0memT5nr4+dH0+dRodtfTU+1re5Gujw5n+nx6
NLvrmen2tb1I11PDmT6fGc3uenamfW0v8vXM7OiXja5n54ZzeDG8nh19Mtte
5Ov217TXc/PDObwYXs+NPpnrLtJ1+2va6/mF4RxeDK/nR5/Mdxfpuv017fXC
4nAOL4bXC6NPFtJFdz2a3fXi0nCmi8XFxdFrd5GuR3OpfR0sNXN00V53n7QX
g+56OAfLw7eD5cFw5ovlwfJodtcrA/t8Zbl5O3pdXh69XRldr6x2F6PrlRX7
fKWZq6OZr4eva6ura+k/Ndfp14w+X10bze5ivX1dG861fN39mvXR5+uj2V1s
rDevG83r6MKu0+fDuTma3fVG87q5ubE5urDr0WyvN7c2h3N0sTW62EoX7Sc2
j201r8eObR3Di9FrOLe3j7WveDGa2/l6Z4euw7m7u7O7s5Ov6XOex3d3h6/H
d48Pr3a6691m7uTPT4zmcTfzr/e/bfuH+guc8vfHf1372o7hxejbwO8n/Pba
7zxfyMw/mvbn1f0E08w/9/xTTjfGRr4r2tsG76XuAj/BOzDfn/kGXrd7ON/b
zZ3fvYX7n56O9iI9PukiPV/dgzZY9s9jelrb/zp8upfbh7p76uExTysAvNrq
IetJ9zYvNd1FXp1kveomLWsL7YrXLnrdemhrY1otF2D97JbZPGfTOiyrcbdi
8xo+Y2v7LH8Cr+0+0l6kvaN7zZ/gxB0q71xTtnkdneKLtN91W+FolzxqM22X
6YJ22LQL5+sj7WadLo60GzRM2OvT7j85+qRFBZMtbJhMmCHjB0UX9tpgkvEO
kwzBSYtPxvgTnIfHDjczX4yuu9ex9MloHmpem3/CQw99+8Ch1/czmy+h/Srg
IsG29GXiN5xmBNsSeBv+7BJOyz9ZQ2sK2yb9fYLTwbYjwX0IE2Bb98o3tk6A
bd1rQmvB45OfL3rQWqjWYTad8CBnIDebcZqfaR2YheWib7awbY5hWzgXEnJL
EM5gWzgXeW1sV0sP1eztgNZej9baFRveDpYGtrZ3Fwm2dVtD2gjg7TJuGSsJ
uQ1f80bTfT68CDamdtvqtrOV9LqyZrubQTjbDWGjXIOLvIeub3Tb60bac+PJ
sG0jbeWbpZk2fYRt8UyALYOKEKp5ZCLILQQ2+NYjN8VpOwG4yuCtQ2sRPLPZ
gTqDee3/JARsAho9bNvZ3vb/nHAeS9+G4jSGwYiQPWDb3LKfF14Qcttc38z4
rXy3rAfIje7DdbkhAarR/Sy3/fDCji0redLjs5yfo+5BS+ejjNwG6XWAp61l
O2114M3jtOhY1y4dvKq0Cw6uP+mCYFtCbgvda17o8vkUYJudZPOyyQupX2a7
pRjXZ1ux6e0MnMpp/S9sE7Ch0EYj25DxCdO0f6XdrSUi8n6XLnR/BJzWsh9H
6QJ3XsNpuF/jBe3vhtMmEQ/ghU2P04qzA2wjzDZ67aDaYXiFiwTYdB4+lF+b
3/Ab3/j6gUOvJzcffvihjGAnApIt+KQFxvKDSGA7+CTjt4hkCz4Z3i2j++Qo
wrb2pprqPjwq+G30C6YQtmWSLfNv3Sf5fu4QmpJsmX8D2q19XvKTRSRb5t+A
dmsfTDxh2bHL+Dej3dq3BtVanJYOd4l/m5slqg1WmHQ8bNeifGxkqg2h2jwc
TuETw2/zDNUW3OJpn9jR2KDaoi7Cjm0zhDZYGtAKnxZ5ZtsSQusuVujgv4yf
5H0Hd6JVpt1WcaaNjKAa0xT4SbstriNUQxrEfTLadtcMoSVKLZMtBtuAakOo
tklgANg2RgslqKafAGBzJFswSzith3nzPFsHugBx5U8yMEOG7YQn2QzyFdDg
TsCweZ4tXwtIE/i6J8m21XOBPy/Gaf4Cf/qZZOvQWr5/8ALvLgNpzAbDhbDH
yC37J4Kfl+5RArSWHj08N+Vn04hx5M/zuYyQW2bb0vqQjnvp3LcIFzzpOJku
5uGTeYFw0ekVDrZ5kQygGhBrhNwEvKVlnBZ2Q24K29Ixfxov0g7iwVuiEYhY
kP0LIZwSF+6CyLeYJ5kMrgG8KQ9j/EyL3IxkE5yWibVMBLXAo/sQQFqCJWNy
geAtk2wtYBteANtGtBuAt0PN/w2R26HmgXr88ccOHIM90dk8MuP0RY0RcoMy
6PiEoTXg2cYj5DaJeJt/vhM95VFgX/OtMonIX8qjRPMm8g0I4cyzTWWclqui
+XjCyG3KcFqCcHLqYeQGJdEE4eQMhU9rOnbNIoTLx7Q5Jtkcz2b8/HyCanIk
ZJ5tztAanjrTkdPxbPOC1vBsG/FsC0sZtg0iki1dLzmSLdNrTLJ117k82p3i
+TgflEehHrrs2La0ExmK61g1QWurK/YqPFvaENeJbdu7PLoBVVEj35BUcTgt
oTXDbLjvF3k2oNeQ+ZHy6HZU+OtBboJwCPxsc3kU+K7wLcIt480Qtgla418m
kK8ts/piqNJuOzsC1fYm2fgLyRA3pNc8fqPiNfy8coFb8JuSbJv2mkEa4rf8
6mleuD8zLSwkm+fZVhPtnHBa97wwvZaRGxZJ8Xlkeo3ephPZEj/1MOlkl9eN
dBhcWGIxRlp/aGnKQE6LoWnFyydTgW1SDM0H3jlbYAm25Vek1+bg3D0L6hd8
jXg2B9tmp4EZ4G0oEQjEJ7T7l+1uKgcKiqRaDE3bKNBuiS0JiqHGq9hbgm1I
smHdrQDb7LWHXgP8Ng5oLaTXGL+NW5F0VBU1nq1DbmOHm5/OI49858Bh2P5n
s+Z0teMJ1bNltCbCtvS1a2E0i9YEuaWfptRJ8w/9iCC3LGnT8ihyuYDcSkXS
jNYUuRWKpIbWBLkViqSG1pRhi4ukhtZmhWGjIumc8WwJrc0Jw8ZVUePZ5uaQ
bStUSBfSK65vzLBxbXRpIdUgbLVkhYno2SKebXTNZRHTsyXY1qE1EbZ1JBvq
Z+yMT2xbKo9CVXRVObcOqhlyY20PitmEskjIbT0qkoZsm9S2XHk082yE3LRI
2u31tPt7hk2otj4xWxm2ualVUc9ZISiiYmWhMJpLnATV9iySZuQWStocSuyf
Yc1XYJsvIofU5Va5Nko82xaxphsOtm0A4YYIfwO5NU/k4k2YBJZAsrE4EyRt
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
bHftVyRYqc52137pK6+W5emW5Wicydd7zTP5eq95Jl/7XQy2Ob/xdfOMM/Ra
BnyS91+8KM8QBhRmiC7ceClf7zGbgddp/Im7/pN2Nl/7Jz/5iR9EzPbWt7zl
WT/xE3U+LeazRjNf4yfP2nM+K70+Cz55mo6fTK94UWed/ysn3oH/qsdPRBfl
6Ze1A19463yqzub4s7Oz/YOF2dyfVUcdddRRRx111PF0GKcIR1XAVkcdddRR
Rx111HHSR8VsddRRRx111FFHHT8Q46RDqQrY6qijjjrqqKOOOk7FeIpjtjrq
qKOOOuqoo446/uUUAKoK2Oqoo4466qijjjpOxaiYrY466qijjjrqqOMpPk4F
pqqYrY466qijjjrqqOPkjqcsZqujjjrqqKOOOuqoI49TBKsqZqujjjrqqKOO
Ouo4WeOUwqqK2eqoo4466qijjjq+/3GqqbCK2eqoo4466qijjjq+n/H9o7V9
wqqK2eqoo4466qijjjqexDhZaG3/sKpitjrqqKOOOuqoo44nNE4uYNs/rKqY
rY466qijjjrqqGP/46Aw25P7o+uoo4466qijjjqenuMAMduT+NPrqKOOOuqo
o446np7jYDHbE/0L1FFHHXXUUUcddTxtx8Fitif0F6ijjjrqqKOOOup42o6T
idn+fxaqCiI=
    "], {{0, 110}, {828, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> ColorProfileData[CompressedData["
1:eJyVlwdYU8kWx+eWFEISSiACUkJvIr1L70VBqmAjJIGEEkIgKNiRRQXXgogF
K7oqYlsLIIsNsSOCvb9YUFDWxYINlTdJAH2+3e99b75v7v3l3DNn/mdm7s2M
YWpOTBoKAMgjw0sMe4afWMwujMXhD//CfF4qAsFCBV6AigVbJMpCVQHIFuaL
Y0L8WZOSklkkKUABGagAd2DL5uSJ/KKjI8E/lvc3gSwguGYji/XPfn9b1Li8
PA4ASDTkVG4eJxvyYQBwOkckzgeA0ArtxjPyRTLuhqwhhgIhf5FxupyJqjJO
VbCJ3CcuJgCyGwBkKpstTgeAHgjtrAJOOoxD50K2E3IFQsiVkL05fDa00a9D
HpOdnQNZPjgWqT/ESf+PmKkjMdns9BFW5CIv5EBBniiLXfh/Dsf/LtlZkuE+
DGGl8sWhMbKc4bhtyMyJkDEV8gFh6oQoyOqQmwVcub+M2/mS0PghfyknLwCO
GWBCfsdlB0ZA1gUApUgy4/2G2IwtlreF/qi/ID8sbogTxDkxQ/HRDGHWhEhF
HHQ2nxc2zBW8vKDYYZ80QXAYZDhX6K4iflyiQifaWCBImACZDrk1LzM2Yqjt
1SJ+wIRhH7EkRqYZzi3anSYOjlH4YNTsvOG8MCMOW96XFmSnfH5cqKItFsnl
BQYp+sUm8YTxQ3owvijfP2bIv0iUJV/fMnsFLytEZjeCvD2vIHa47dl8uKgU
uWM3M9jh0QrN2AtRfnTckJ6PIBIEgEDAAhJYU0EOyACC9t6GXvhL8SQYsIEY
pAMesBmyDLdIlD8RwmssKAJ/QuKBvJF2/vKnPFAA7V9HrIqrDUiTPy2Qt8gE
zyBn4zq4N+6JR8KrL6wOuBvuPtyOpTLcKzGIGEgMJQYTLUd0cKDqLFjFQPA3
tgh458HsZFqEwzl8j0d4RugkPCbcIEgJd0ACeCqPMuQ1XVAs/kk5C4wHUhgt
eCi7VBizZ9gHN4OqnXF/3Avqh9pxJq4DbHAnmIkf7gNzc4bWHxVKRrR9H8uf
+5Op/jGfITvdiu48pCJ1ZGYCRrx+jhLwwxhx4T3iZ09sMXYIO4edwi5gzVgD
YGEnsEasDTsm45GV8FS+EoZ7i5Fry4RxBMM+dnV2PXZf/qt39pACsXy+QT5v
Zr7sJQjIERWKBen8fJYf/ArzWGFCztgxLAc7excAZN90xSfjLVP+rUaYF7/b
ck8C4F4GjenfbWxjAI4+A4Dx/rvN+A18pVYAcKyDIxEXKGyyvxRAABT4wdQA
2kAfGAMLmJMDcAGewBcEgXAQBeJAEpgGR50PsqHqGWA2WABKQTlYAVaD9WAz
2AZ2gb3gIGgAzeAUOAsugQ5wA9yDa6MLvAR94D0YQBCEhNAQBqKNGCCmiDXi
gLgh3kgQEonEIElICpKOCBEJMhtZiJQjFch6ZCtSi/yOHEVOIReQTuQO8gjp
Qd4gn1EMpaIaqB5qhtqibqgfGoHGoVPRdDQXLUJL0GXoWrQG3YPWo6fQS+gN
VIq+RPsxgCljTMwQs8HcsAAsCkvG0jAxNhcrw6qwGmwf1gTn+homxXqxTzgR
Z+As3Aauz1A8HufgufhcfCm+Ht+F1+Ot+DX8Ed6HfyPQCLoEa4IHIYwwiZBO
mEEoJVQRdhCOEM7Ad6eL8J5IJDKJ5kRX+G4mETOIs4hLiRuJ+4kniZ3EJ8R+
EomkTbImeZGiSGxSPqmUtI60h3SCdJXURfpIViYbkB3IweRkspBcTK4i7yYf
J18lPycPKKkqmSp5KEUpcZUKlZYrbVdqUrqi1KU0QFGjmFO8KHGUDMoCylrK
PsoZyn3KW2VlZSNld+WJygLl+cprlQ8on1d+pPyJqk61ogZQp1Al1GXUndST
1DvUtzQazYzmS0um5dOW0Wppp2kPaR/pDPpYehidS59Hr6bX06/SX6koqZiq
+KlMUylSqVI5pHJFpVdVSdVMNUCVrTpXtVr1qOot1X41hpq9WpRattpStd1q
F9S61UnqZupB6lz1EvVt6qfVnzAwhjEjgMFhLGRsZ5xhdGkQNcw1wjQyNMo1
9mq0a/Rpqms6aSZoztSs1jymKWViTDNmGDOLuZx5kHmT+XmU3ii/UbxRS0bt
G3V11Aet0Vq+WjytMq39Wje0PmuztIO0M7VXajdoP9DBdax0JurM0Nmkc0an
d7TGaM/RnNFlow+OvquL6lrpxujO0t2m26bbr6evF6In0lund1qvV5+p76uf
oV+pf1y/x4Bh4G0gMKg0OGHwgqXJ8mNlsdayWll9hrqGoYYSw62G7YYDRuZG
8UbFRvuNHhhTjN2M04wrjVuM+0wMTMabzDapM7lrqmTqZso3XWN6zvSDmblZ
otkiswazbnMt8zDzIvM68/sWNAsfi1yLGovrlkRLN8tMy42WHVaolbMV36ra
6oo1au1iLbDeaN05hjDGfYxwTM2YWzZUGz+bAps6m0djmWMjxxaPbRj7ytbE
Ntl2pe052292znZZdtvt7tmr24fbF9s32b9xsHLgOFQ7XHekOQY7znNsdHzt
ZO3Ec9rkdNuZ4TzeeZFzi/NXF1cXscs+lx5XE9cU1w2ut9w03KLdlrqddye4
+7vPc292/+Th4pHvcdDjL08bz0zP3Z7d48zH8cZtH/fEy8iL7bXVS+rN8k7x
3uIt9TH0YfvU+Dz2Nfbl+u7wfe5n6Zfht8fvlb+dv9j/iP+HAI+AOQEnA7HA
kMCywPYg9aD4oPVBD4ONgtOD64L7QpxDZoWcDCWERoSuDL0VphfGCasN6wt3
DZ8T3hpBjYiNWB/xONIqUhzZNB4dHz5+1fj7E0wnCCc0RIGosKhVUQ+izaNz
o/+YSJwYPbF64rMY+5jZMediGbHTY3fHvo/zj1sedy/eIl4S35KgkjAloTbh
Q2JgYkWidJLtpDmTLiXpJAmSGpNJyQnJO5L7JwdNXj25a4rzlNIpN6eaT505
9cI0nWlZ045NV5nOnn4ohZCSmLI75Qs7il3D7k8NS92Q2scJ4KzhvOT6ciu5
PTwvXgXveZpXWkVad7pX+qr0Hr4Pv4rfKwgQrBe8zgjN2JzxITMqc2fmYFZi
1v5scnZK9lGhujBT2JqjnzMzp1NkLSoVSXM9clfn9okjxDvykLypeY35GnDz
3CaxkPwieVTgXVBd8HFGwoxDM9VmCme2FVoVLil8XhRc9NssfBZnVstsw9kL
Zj+a4zdn61xkburclnnG80rmdc0Pmb9rAWVB5oLLxXbFFcXvFiYubCrRK5lf
8uSXkF/qSuml4tJbizwXbV6MLxYsbl/iuGTdkm9l3LKL5XblVeVflnKWXvzV
/te1vw4uS1vWvtxl+aYVxBXCFTdX+qzcVaFWUVTxZNX4VfWVrMqyynerp6++
UOVUtXkNZY1kjXRt5NrGdSbrVqz7sp6//ka1f/X+Dboblmz4sJG78eom3037
NuttLt/8eYtgy+2tIVvra8xqqrYRtxVse7Y9Yfu539x+q92hs6N8x9edwp3S
XTG7Wmtda2t36+5eXofWSep69kzZ07E3cG/jPpt9W/cz95cfAAckB178nvL7
zYMRB1sOuR3ad9j08IYjjCNl9Uh9YX1fA79B2pjU2Hk0/GhLk2fTkT/G/rGz
2bC5+pjmseXHKcdLjg+eKDrRf1J0svdU+qknLdNb7p2edPp668TW9jMRZ86f
DT57+pzfuRPnvc43X/C4cPSi28WGSy6X6tuc245cdr58pN2lvf6K65XGDveO
ps5xncev+lw9dS3w2tnrYdcv3Zhwo/Nm/M3bt6bckt7m3u6+k3Xn9d2CuwP3
5t8n3C97oPqg6qHuw5p/Wf5rv9RFeuxR4KO2x7GP7z3hPHn5NO/pl66SZ7Rn
Vc8Nntd2O3Q39wT3dLyY/KLrpejlQG/pn2p/bnhl8erwX75/tfVN6ut6LX49
+GbpW+23O985vWvpj+5/+D77/cCHso/aH3d9cvt07nPi5+cDM76Qvqz9avm1
6VvEt/uD2YODIraYLd8KYLCiaWkAvNkJAC0J7h06AKDQFWcueUEU50Q5gX9i
xblMXuDOZacvAPHzAYiEe5RNsJpCpsK7bPsd5wtQR8eROlTy0hwdFLGo8ORC
+Dg4+FYPAFITAF/Fg4MDGwcHv26HYu8AcDJXcdaTFdkZcouRjC4bz/sIfir/
Bs1scpE=
      "], "RGB", "XYZ"], Interleaving -> True],
   Selectable->False],
  BaseStyle->"ImageGraphics",
  ImageSize->{515.9921875, Automatic},
  ImageSizeRaw->{828, 110},
  PlotRange->{{0, 828}, {0, 110}}]], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Analytic solutions", "Section",
 CellChangeTimes->{{3.617428019371695*^9, 3.6174280209794273`*^9}}],

Cell[CellGroupData[{

Cell["\[OpenCurlyQuote]Radiance\[CloseCurlyQuote]", "Subsection",
 CellChangeTimes->{{3.6174307357157917`*^9, 3.617430742507958*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"infrodisopointisoscatter`LR", "[", 
   RowBox[{"x_", ",", "\[Alpha]_", ",", "\[CapitalSigma]t_"}], "]"}], ":=", 
  FractionBox[
   RowBox[{
    SuperscriptBox["\[ExponentialE]", 
     RowBox[{
      RowBox[{"-", 
       RowBox[{"Abs", "[", "x", "]"}]}], " ", 
      SqrtBox[
       RowBox[{"1", "-", "\[Alpha]"}]], " ", "\[CapitalSigma]t"}]], " ", 
    RowBox[{"(", 
     RowBox[{"1", "+", 
      RowBox[{
       SqrtBox[
        RowBox[{"1", "-", "\[Alpha]"}]], " ", 
       RowBox[{"Sign", "[", "x", "]"}]}]}], ")"}]}], 
   RowBox[{"4", " ", 
    SqrtBox[
     RowBox[{"1", "-", "\[Alpha]"}]]}]]}]], "Input",
 CellChangeTimes->{{3.617430690623348*^9, 3.6174307057929173`*^9}, {
  3.617430826778767*^9, 3.617430831298792*^9}, {3.6462728642051487`*^9, 
  3.646272869418385*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"infrodisopointisoscatter`LL", "[", 
   RowBox[{"x_", ",", "\[Alpha]_", ",", "\[CapitalSigma]t_"}], "]"}], ":=", 
  FractionBox[
   RowBox[{
    SuperscriptBox["\[ExponentialE]", 
     RowBox[{
      RowBox[{"-", 
       RowBox[{"Abs", "[", "x", "]"}]}], " ", 
      SqrtBox[
       RowBox[{"1", "-", "\[Alpha]"}]], " ", "\[CapitalSigma]t"}]], " ", 
    RowBox[{"(", 
     RowBox[{"1", "-", 
      RowBox[{
       SqrtBox[
        RowBox[{"1", "-", "\[Alpha]"}]], " ", 
       RowBox[{"Sign", "[", "x", "]"}]}]}], ")"}]}], 
   RowBox[{"4", " ", 
    SqrtBox[
     RowBox[{"1", "-", "\[Alpha]"}]]}]]}]], "Input",
 CellChangeTimes->{{3.617430716019354*^9, 3.617430719357438*^9}, {
   3.61743083377562*^9, 3.617430837914253*^9}, 3.646272876515547*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Fluence", "Subsection",
 CellChangeTimes->{{3.6174280405395184`*^9, 3.617428041266676*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"infrodisopointisoscatter`\[Phi]", "[", 
   RowBox[{"x_", ",", "\[Alpha]_", ",", "\[CapitalSigma]t_"}], "]"}], ":=", 
  RowBox[{
   FractionBox["1", 
    RowBox[{"2", 
     SqrtBox[
      RowBox[{"1", "-", "\[Alpha]"}]]}]], 
   SuperscriptBox["E", 
    RowBox[{
     RowBox[{"-", "\[CapitalSigma]t"}], " ", 
     SqrtBox[
      RowBox[{"1", "-", "\[Alpha]"}]], 
     RowBox[{"Abs", "[", "x", "]"}]}]]}]}]], "Input",
 CellChangeTimes->{{3.61742826600518*^9, 3.617428300462263*^9}, {
   3.6174283455645227`*^9, 3.617428382979632*^9}, 3.646272878499361*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["n-th collided fluence", "Subsection",
 CellChangeTimes->{{3.618028583897595*^9, 3.618028587232552*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"infrodisopointisoscatter`\[Phi]", "[", 
   RowBox[{"x_", ",", "n_", ",", "\[Alpha]_", ",", "\[CapitalSigma]t_"}], 
   "]"}], ":=", 
  FractionBox[
   RowBox[{
    SuperscriptBox["2", 
     RowBox[{
      RowBox[{"-", "n"}], "-", 
      FractionBox["1", "2"]}]], 
    SuperscriptBox["\[Alpha]", "n"], 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Abs", "[", "x", "]"}], "\[CapitalSigma]t"}], ")"}], 
     RowBox[{"n", "+", 
      FractionBox["1", "2"]}]], 
    RowBox[{"BesselK", "[", 
     RowBox[{
      RowBox[{"n", "+", 
       FractionBox["1", "2"]}], ",", 
      RowBox[{"\[CapitalSigma]t", " ", 
       RowBox[{"Abs", "[", "x", "]"}]}]}], "]"}]}], 
   RowBox[{
    SqrtBox["Pi"], 
    RowBox[{"Gamma", "[", 
     RowBox[{"n", "+", "1"}], "]"}]}]]}]], "Input",
 CellChangeTimes->{{3.618028819362002*^9, 3.618028820627399*^9}, {
   3.6180291691249523`*^9, 3.6180291991728563`*^9}, 3.646272879879464*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["moments", "Subsection",
 CellChangeTimes->{{3.617434940435688*^9, 3.617434941186858*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"infrodisopointisoscatter`\[Phi]m", "[", 
   RowBox[{"\[Alpha]_", ",", "\[CapitalSigma]t_", ",", "k_"}], "]"}], ":=", 
  RowBox[{
   FractionBox["1", "2"], " ", 
   RowBox[{"(", 
    RowBox[{"1", "+", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"-", "1"}], ")"}], "k"]}], ")"}], " ", 
   SuperscriptBox["\[CapitalSigma]t", 
    RowBox[{
     RowBox[{"-", "1"}], "-", "k"}]], " ", 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"1", "-", "\[Alpha]"}], ")"}], 
    RowBox[{
     RowBox[{"-", "1"}], "-", 
     FractionBox["k", "2"]}]], " ", 
   RowBox[{"k", "!"}]}]}]], "Input",
 CellChangeTimes->{{3.617434946155171*^9, 3.61743497664139*^9}, 
   3.617435010819428*^9, 3.6174353385228453`*^9, 3.617778861866281*^9, 
   3.61777966643909*^9, 3.646272881487772*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"infrodisopointisoscatter`\[Phi]m", "[", 
   RowBox[{"\[Alpha]_", ",", "\[CapitalSigma]t_", ",", "k_", ",", "n_"}], 
   "]"}], ":=", 
  RowBox[{
   SuperscriptBox["\[Alpha]", "n"], 
   RowBox[{"(", 
    RowBox[{
     FractionBox["1", "2"], " ", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"-", "1"}], ")"}], "n"], " ", 
     RowBox[{"(", 
      RowBox[{"1", "+", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"-", "1"}], ")"}], "k"]}], ")"}], " ", 
     SuperscriptBox["\[CapitalSigma]t", 
      RowBox[{
       RowBox[{"-", "1"}], "-", "k"}]], " ", 
     RowBox[{"Binomial", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "1"}], "-", 
        FractionBox["k", "2"]}], ",", "n"}], "]"}], " ", 
     RowBox[{"k", "!"}]}], ")"}]}]}]], "Input",
 CellChangeTimes->{{3.646261784080875*^9, 3.646261826435824*^9}, {
   3.646262034746467*^9, 3.646262035343235*^9}, {3.646262066866022*^9, 
   3.646262074092552*^9}, 3.646272882635119*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["load MC data", "Section",
 CellChangeTimes->{{3.617427964847665*^9, 3.617427965662361*^9}, {
  3.6174280073412037`*^9, 3.617428007556081*^9}, {3.640936210100869*^9, 
  3.640936211771452*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"infrodisopointisoscatter`ppoints", "[", 
   RowBox[{"xs_", ",", "dx_", ",", "maxx_", ",", "\[CapitalSigma]t_"}], "]"}],
   ":=", 
  RowBox[{
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "maxx"}], "+", 
        RowBox[{"dx", 
         RowBox[{"(", 
          RowBox[{"i", "-", "1"}], ")"}]}], "+", 
        RowBox[{"0.5", "dx"}]}], ",", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"1", "/", "\[CapitalSigma]t"}], ")"}], 
        RowBox[{"xs", "[", 
         RowBox[{"[", "i", "]"}], "]"}]}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", 
       RowBox[{"Length", "[", "xs", "]"}]}], "}"}]}], "]"}], "[", 
   RowBox[{"[", 
    RowBox[{"2", ";;", 
     RowBox[{"-", "2"}]}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.617848413386137*^9, 3.6178484581160173`*^9}, {
   3.61959273772493*^9, 3.6195927529849243`*^9}, 3.646256598177155*^9, 
   3.646272886023567*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"infrodisopointisoscatter`fs", "=", 
   RowBox[{
   "FileNames", "[", 
    "\"\<code/rod/infiniterod/Isotropicpointsource/data/infrod_isotropicpoint_\
isotropicscatter_exp*\>\"", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.617431703558316*^9, 3.61743173077596*^9}, {
   3.61959282254521*^9, 3.6195928356726227`*^9}, {3.6409361975771008`*^9, 
   3.640936201348721*^9}, 3.645065566454424*^9, 3.6462558913234873`*^9, 
   3.646272887126522*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"infrodisopointisoscatter`index", "[", "x_", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"data", ",", "\[Alpha]", ",", "\[CapitalSigma]t"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"data", "=", 
       RowBox[{"Import", "[", 
        RowBox[{"x", ",", "\"\<Table\>\""}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"\[CapitalSigma]t", "=", 
       RowBox[{"data", "[", 
        RowBox[{"[", 
         RowBox[{"1", ",", "12"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"\[Alpha]", "=", 
       RowBox[{"data", "[", 
        RowBox[{"[", 
         RowBox[{"2", ",", "3"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      
      RowBox[{"{", 
       RowBox[{"\[Alpha]", ",", "\[CapitalSigma]t", ",", "data"}], "}"}]}]}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"infrodisopointisoscatter`simulations", "=", 
   RowBox[{
   "infrodisopointisoscatter`index", "/@", "infrodisopointisoscatter`fs"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.645065231793377*^9, 3.645065296029221*^9}, {
   3.6450653296918097`*^9, 3.6450653865106487`*^9}, 3.6450654361720257`*^9, {
   3.646255921487211*^9, 3.646255921557672*^9}, {3.646272890750815*^9, 
   3.646272903617794*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"infrodisopointisoscatter`alphas", "=", 
  RowBox[{"Union", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"#", "[", 
      RowBox[{"[", "1", "]"}], "]"}], "&"}], "/@", 
    "infrodisopointisoscatter`simulations"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.645065448960425*^9, 3.6450654746981783`*^9}, {
  3.646272905825007*^9, 3.646272908129086*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.1`", ",", "0.3`", ",", "0.5`", ",", "0.7`", ",", "0.9`"}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.6450654647633867`*^9, 3.645065474997116*^9}, 
   3.645070161322473*^9, 3.64617397571076*^9, 3.646254687365184*^9, {
   3.646255904165*^9, 3.646255925111535*^9}, 3.646256616423402*^9, 
   3.646262541193899*^9, 3.646270527647534*^9, 3.646271205801887*^9, 
   3.646271305561139*^9, 3.646273040824273*^9, 3.646273374964735*^9, 
   3.64627351931855*^9, 3.663892703531336*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"infrodisopointisoscatter`muts", "=", 
  RowBox[{"Union", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"#", "[", 
      RowBox[{"[", "2", "]"}], "]"}], "&"}], "/@", 
    "infrodisopointisoscatter`simulations"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.645065539848353*^9, 3.645065542907295*^9}, {
  3.646272911227481*^9, 3.646272912896513*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "3"}], "}"}]], "Output",
 CellChangeTimes->{
  3.64506554314834*^9, 3.645070161361624*^9, 3.6461739757283497`*^9, 
   3.646254687418363*^9, {3.646255904185261*^9, 3.646255925160824*^9}, 
   3.646256616474985*^9, 3.6462625412463512`*^9, 3.646270527687414*^9, 
   3.646271205855611*^9, 3.646271305579796*^9, 3.64627304084693*^9, 
   3.646273374983109*^9, 3.646273519337202*^9, 3.663892703579248*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"infrodisopointisoscatter`numcollorders", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"infrodisopointisoscatter`simulations", "[", 
      RowBox[{"[", "1", "]"}], "]"}], "[", 
     RowBox[{"[", "3", "]"}], "]"}], "[", 
    RowBox[{"[", 
     RowBox[{"2", ",", "11"}], "]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.6462711467267323`*^9, 3.646271194585766*^9}, 
   3.646271283721418*^9, {3.6462729140673847`*^9, 3.646272916280529*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Compare Deterministic and MC", "Section",
 CellChangeTimes->{{3.617428104753593*^9, 3.6174281129212646`*^9}}],

Cell[CellGroupData[{

Cell["Internal distributions", "Subsection",
 CellChangeTimes->{{3.646256878123049*^9, 3.6462568812106247`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", 
   RowBox[{"\[Alpha]", ",", "\[CapitalSigma]t"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Length", "[", "infrodisopointisoscatter`simulations", "]"}], 
      ">", "0"}], ",", "\[IndentingNewLine]", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "data", ",", "maxx", ",", "dx", ",", "numcollorders", ",", 
         "nummoments", ",", "densmom", ",", "pointsCL", ",", "plotpointsCL", 
         ",", "pointsCR", ",", "plotpointsCR", ",", "plotpoints\[Phi]", ",", 
         "plot\[Phi]", ",", "plotLL", ",", "plotLR"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"data", "=", 
         RowBox[{
          RowBox[{"SelectFirst", "[", 
           RowBox[{"infrodisopointisoscatter`simulations", ",", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"#", "[", 
                RowBox[{"[", "1", "]"}], "]"}], "\[Equal]", "\[Alpha]"}], "&&", 
              RowBox[{
               RowBox[{"#", "[", 
                RowBox[{"[", "2", "]"}], "]"}], "\[Equal]", 
               "\[CapitalSigma]t"}]}], "&"}]}], "]"}], "[", 
          RowBox[{"[", "3", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"maxx", "=", 
         RowBox[{"data", "[", 
          RowBox[{"[", 
           RowBox[{"2", ",", "5"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"dx", "=", 
         RowBox[{"data", "[", 
          RowBox[{"[", 
           RowBox[{"2", ",", "7"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"numcollorders", "=", 
         RowBox[{"data", "[", 
          RowBox[{"[", 
           RowBox[{"2", ",", "11"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"nummoments", "=", 
         RowBox[{"data", "[", 
          RowBox[{"[", 
           RowBox[{"2", ",", "13"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"pointsCL", " ", "=", " ", 
         RowBox[{"data", "[", 
          RowBox[{"[", "4", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "divide", " ", "by", " ", "\[CapitalSigma]t", " ", "to", " ", 
          "convert", " ", "collision", " ", "density", " ", "into", " ", 
          "L"}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"plotpointsCL", "=", 
         RowBox[{"infrodisopointisoscatter`ppoints", "[", 
          RowBox[{
          "pointsCL", ",", "dx", ",", "maxx", ",", "\[CapitalSigma]t"}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"pointsCR", " ", "=", " ", 
         RowBox[{"data", "[", 
          RowBox[{"[", "6", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"plotpointsCR", "=", 
         RowBox[{"infrodisopointisoscatter`ppoints", "[", 
          RowBox[{
          "pointsCR", ",", "dx", ",", "maxx", ",", "\[CapitalSigma]t"}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "divide", " ", "by", " ", "\[CapitalSigma]t", " ", "to", " ", 
          "convert", " ", "collision", " ", "density", " ", "into", " ", 
          "fluence"}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"plotpoints\[Phi]", "=", 
         RowBox[{"infrodisopointisoscatter`ppoints", "[", 
          RowBox[{
           RowBox[{"pointsCL", "+", "pointsCR"}], ",", "dx", ",", "maxx", ",",
            "\[CapitalSigma]t"}], "]"}]}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"plot\[Phi]", "=", 
         RowBox[{"Show", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"ListPlot", "[", 
            RowBox[{"plotpoints\[Phi]", ",", 
             RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
             RowBox[{"PlotStyle", "\[Rule]", 
              RowBox[{"PointSize", "[", ".01", "]"}]}]}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"Plot", "[", 
            RowBox[{
             RowBox[{"infrodisopointisoscatter`\[Phi]", "[", 
              RowBox[{"x", ",", "\[Alpha]", ",", "\[CapitalSigma]t"}], "]"}], 
             ",", 
             RowBox[{"{", 
              RowBox[{"x", ",", 
               RowBox[{"-", "maxx"}], ",", "maxx"}], "}"}], ",", 
             RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}], 
           "\[IndentingNewLine]", ",", 
           RowBox[{"Frame", "\[Rule]", "True"}], ",", "\[IndentingNewLine]", 
           RowBox[{"FrameLabel", "->", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"\[Phi]", "[", "x", "]"}], ","}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"x", ",", 
                RowBox[{
                "\"\<Infinite Rod, isotropic point, isotropic scattering, \
fluence \[Phi][x], \[Alpha] = \>\"", "<>", 
                 RowBox[{"ToString", "[", "\[Alpha]", "]"}], "<>", 
                 "\"\<, \!\(\*SubscriptBox[\(\[CapitalSigma]\), \(t\)]\) = \>\
\"", "<>", 
                 RowBox[{"ToString", "[", "\[CapitalSigma]t", "]"}]}]}], 
               "}"}]}], "}"}]}]}], "\[IndentingNewLine]", "]"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"plotLL", "=", 
         RowBox[{"Show", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"ListPlot", "[", 
            RowBox[{"plotpointsCL", ",", 
             RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
             RowBox[{"PlotStyle", "\[Rule]", 
              RowBox[{"PointSize", "[", ".01", "]"}]}]}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"Plot", "[", 
            RowBox[{
             RowBox[{"infrodisopointisoscatter`LL", "[", 
              RowBox[{"x", ",", "\[Alpha]", ",", "\[CapitalSigma]t"}], "]"}], 
             ",", 
             RowBox[{"{", 
              RowBox[{"x", ",", 
               RowBox[{"-", "maxx"}], ",", "maxx"}], "}"}], ",", 
             RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"Plot", "[", 
            RowBox[{
             RowBox[{"infrodisopointisoscatter`\[Phi]", "[", 
              RowBox[{"x", ",", "\[Alpha]", ",", "\[CapitalSigma]t"}], "]"}], 
             ",", 
             RowBox[{"{", 
              RowBox[{"x", ",", 
               RowBox[{"-", "maxx"}], ",", "maxx"}], "}"}], ",", 
             RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
             RowBox[{"PlotStyle", "\[Rule]", "Dashed"}]}], "]"}], 
           "\[IndentingNewLine]", ",", 
           RowBox[{"Frame", "\[Rule]", "True"}], ",", "\[IndentingNewLine]", 
           RowBox[{"FrameLabel", "->", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 SubscriptBox["L", "-"], "[", "x", "]"}], ","}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"x", ",", 
                RowBox[{
                "\"\<Infinite Rod, isotropic point, isotropic scattering, \
\!\(\*SubscriptBox[\(L\), \(-\)]\)[x], \[Alpha] = \>\"", "<>", 
                 RowBox[{"ToString", "[", "\[Alpha]", "]"}], "<>", 
                 "\"\<, \!\(\*SubscriptBox[\(\[CapitalSigma]\), \(t\)]\) = \>\
\"", "<>", 
                 RowBox[{"ToString", "[", "\[CapitalSigma]t", "]"}]}]}], 
               "}"}]}], "}"}]}], ",", 
           RowBox[{"PlotRange", "\[Rule]", "All"}]}], "\[IndentingNewLine]", 
          "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"plotLR", "=", 
         RowBox[{"Show", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"ListPlot", "[", 
            RowBox[{"plotpointsCR", ",", 
             RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
             RowBox[{"PlotStyle", "\[Rule]", 
              RowBox[{"PointSize", "[", ".01", "]"}]}]}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"Plot", "[", 
            RowBox[{
             RowBox[{"infrodisopointisoscatter`LR", "[", 
              RowBox[{"x", ",", "\[Alpha]", ",", "\[CapitalSigma]t"}], "]"}], 
             ",", 
             RowBox[{"{", 
              RowBox[{"x", ",", 
               RowBox[{"-", "maxx"}], ",", "maxx"}], "}"}], ",", 
             RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"Plot", "[", 
            RowBox[{
             RowBox[{"infrodisopointisoscatter`\[Phi]", "[", 
              RowBox[{"x", ",", "\[Alpha]", ",", "\[CapitalSigma]t"}], "]"}], 
             ",", 
             RowBox[{"{", 
              RowBox[{"x", ",", 
               RowBox[{"-", "maxx"}], ",", "maxx"}], "}"}], ",", 
             RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
             RowBox[{"PlotStyle", "\[Rule]", "Dashed"}]}], "]"}], 
           "\[IndentingNewLine]", ",", 
           RowBox[{"Frame", "\[Rule]", "True"}], ",", "\[IndentingNewLine]", 
           RowBox[{"FrameLabel", "->", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 SubscriptBox["L", "+"], "[", "x", "]"}], ","}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"x", ",", 
                RowBox[{
                "\"\<Infinite Rod, isotropic point, isotropic scattering, \
\!\(\*SubscriptBox[\(L\), \(+\)]\)[x], \[Alpha] = \>\"", "<>", 
                 RowBox[{"ToString", "[", "\[Alpha]", "]"}], "<>", 
                 "\"\<, \!\(\*SubscriptBox[\(\[CapitalSigma]\), \(t\)]\) = \>\
\"", "<>", 
                 RowBox[{"ToString", "[", "\[CapitalSigma]t", "]"}]}]}], 
               "}"}]}], "}"}]}], ",", 
           RowBox[{"PlotRange", "\[Rule]", "All"}]}], "\[IndentingNewLine]", 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"Show", "[", 
         RowBox[{
          RowBox[{"GraphicsGrid", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", "plot\[Phi]", "}"}], ",", 
             RowBox[{"{", "plotLL", "}"}], ",", 
             RowBox[{"{", "plotLR", "}"}]}], "}"}], "]"}], ",", 
          RowBox[{"ImageSize", "\[Rule]", "500"}]}], "]"}]}]}], 
      "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
     "\[IndentingNewLine]", 
     RowBox[{
     "Text", "[", 
      "\"\<Uh oh!  Couldn't find MC data.  Try to evaluate this entire \
notebook and ensure the data path is setup correctly.\>\"", "]"}]}], 
    "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\[Alpha]", ",", "0.7"}], "}"}], ",", 
     "infrodisopointisoscatter`alphas"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\[CapitalSigma]t", ",", "infrodisopointisoscatter`muts"}], 
    "}"}]}], "]"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.6174281170020113`*^9, 3.61742813267981*^9}, 
   3.6174287994794273`*^9, {3.617428838302623*^9, 3.617428878809485*^9}, {
   3.6174289474455023`*^9, 3.61742896885219*^9}, {3.61742923797204*^9, 
   3.617429325246893*^9}, {3.617429373536989*^9, 3.617429375936674*^9}, {
   3.617429430039774*^9, 3.617429597670169*^9}, {3.617429724574465*^9, 
   3.6174297347942553`*^9}, {3.617429794822505*^9, 3.6174298315174522`*^9}, {
   3.6174298677304993`*^9, 3.6174298817845984`*^9}, {3.617429917431849*^9, 
   3.617429978970625*^9}, {3.617430046618482*^9, 3.6174301175661373`*^9}, {
   3.6174302274511757`*^9, 3.617430269908132*^9}, {3.617430851237011*^9, 
   3.61743094294977*^9}, {3.617431018010861*^9, 3.6174310182802477`*^9}, {
   3.617431054641918*^9, 3.6174310955544443`*^9}, {3.617431738710396*^9, 
   3.617431780737298*^9}, {3.617431916426394*^9, 3.617431938292404*^9}, {
   3.617432017592498*^9, 3.61743203121756*^9}, {3.617434253945896*^9, 
   3.617434276351254*^9}, {3.617434334762925*^9, 3.617434349959379*^9}, {
   3.617434549029696*^9, 3.617434585144499*^9}, {3.6174346161354094`*^9, 
   3.6174346244125147`*^9}, {3.617434842916192*^9, 3.617434849707287*^9}, {
   3.617847326305366*^9, 3.61784732690473*^9}, 3.617848051268721*^9, {
   3.617848167301262*^9, 3.6178481676284246`*^9}, {3.61784850895185*^9, 
   3.617848563337233*^9}, {3.617898951271072*^9, 3.617898951610284*^9}, {
   3.618035560623592*^9, 3.618035561301065*^9}, {3.6462564759754543`*^9, 
   3.646256500112418*^9}, {3.646270684054685*^9, 3.646270758625198*^9}, {
   3.646271217010194*^9, 3.646271220321653*^9}, {3.646273015731471*^9, 
   3.646273024299592*^9}, {3.646273070151842*^9, 3.6462730804469357`*^9}, {
   3.646273399977706*^9, 3.646273405060893*^9}, {3.663892823188312*^9, 
   3.663892825381258*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`\[Alpha]$$ = 
    0.7, $CellContext`\[CapitalSigma]t$$ = 1, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`\[Alpha]$$], 0.7}, {0.1, 0.3, 0.5, 0.7, 0.9}}, {
      Hold[$CellContext`\[CapitalSigma]t$$], {1, 3}}}, Typeset`size$$ = {
    500., {447., 451.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`\[Alpha]$22700$$ = 
    0, $CellContext`\[CapitalSigma]t$22701$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`\[Alpha]$$ = 
        0.7, $CellContext`\[CapitalSigma]t$$ = 1}, "ControllerVariables" :> {
        Hold[$CellContext`\[Alpha]$$, $CellContext`\[Alpha]$22700$$, 0], 
        Hold[$CellContext`\[CapitalSigma]t$$, \
$CellContext`\[CapitalSigma]t$22701$$, False]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      If[Length[infrodisopointisoscatter`simulations] > 0, 
        Module[{$CellContext`data$, $CellContext`maxx$, $CellContext`dx$, \
$CellContext`numcollorders$, $CellContext`nummoments$, $CellContext`densmom$, \
$CellContext`pointsCL$, $CellContext`plotpointsCL$, $CellContext`pointsCR$, \
$CellContext`plotpointsCR$, $CellContext`plotpoints\[Phi]$, $CellContext`plot\
\[Phi]$, $CellContext`plotLL$, $CellContext`plotLR$}, $CellContext`data$ = 
          Part[
            SelectFirst[
            infrodisopointisoscatter`simulations, And[
             Part[#, 1] == $CellContext`\[Alpha]$$, 
              Part[#, 2] == $CellContext`\[CapitalSigma]t$$]& ], 
            3]; $CellContext`maxx$ = 
          Part[$CellContext`data$, 2, 5]; $CellContext`dx$ = 
          Part[$CellContext`data$, 2, 7]; $CellContext`numcollorders$ = 
          Part[$CellContext`data$, 2, 11]; $CellContext`nummoments$ = 
          Part[$CellContext`data$, 2, 13]; $CellContext`pointsCL$ = 
          Part[$CellContext`data$, 4]; $CellContext`plotpointsCL$ = 
          infrodisopointisoscatter`ppoints[$CellContext`pointsCL$, \
$CellContext`dx$, $CellContext`maxx$, $CellContext`\[CapitalSigma]t$$]; \
$CellContext`pointsCR$ = 
          Part[$CellContext`data$, 6]; $CellContext`plotpointsCR$ = 
          infrodisopointisoscatter`ppoints[$CellContext`pointsCR$, \
$CellContext`dx$, $CellContext`maxx$, $CellContext`\[CapitalSigma]t$$]; \
$CellContext`plotpoints\[Phi]$ = 
          infrodisopointisoscatter`ppoints[$CellContext`pointsCL$ + \
$CellContext`pointsCR$, $CellContext`dx$, $CellContext`maxx$, $CellContext`\
\[CapitalSigma]t$$]; $CellContext`plot\[Phi]$ = Show[
            
            ListPlot[$CellContext`plotpoints\[Phi]$, PlotRange -> All, 
             PlotStyle -> PointSize[0.01]], 
            Plot[
             
             infrodisopointisoscatter`\[Phi][$CellContext`x, $CellContext`\
\[Alpha]$$, $CellContext`\[CapitalSigma]t$$], {$CellContext`x, \
-$CellContext`maxx$, $CellContext`maxx$}, PlotRange -> All], Frame -> True, 
            FrameLabel -> {{
               $CellContext`\[Phi][$CellContext`x], Null}, {$CellContext`x, 
               StringJoin[
               "Infinite Rod, isotropic point, isotropic scattering, fluence \
\[Phi][x], \[Alpha] = ", 
                ToString[$CellContext`\[Alpha]$$], 
                ", \!\(\*SubscriptBox[\(\[CapitalSigma]\), \(t\)]\) = ", 
                
                ToString[$CellContext`\[CapitalSigma]t$$]]}}]; \
$CellContext`plotLL$ = Show[
            
            ListPlot[$CellContext`plotpointsCL$, PlotRange -> All, PlotStyle -> 
             PointSize[0.01]], 
            Plot[
             
             infrodisopointisoscatter`LL[$CellContext`x, \
$CellContext`\[Alpha]$$, $CellContext`\[CapitalSigma]t$$], {$CellContext`x, \
-$CellContext`maxx$, $CellContext`maxx$}, PlotRange -> All], 
            Plot[
             
             infrodisopointisoscatter`\[Phi][$CellContext`x, $CellContext`\
\[Alpha]$$, $CellContext`\[CapitalSigma]t$$], {$CellContext`x, \
-$CellContext`maxx$, $CellContext`maxx$}, PlotRange -> All, PlotStyle -> 
             Dashed], Frame -> True, FrameLabel -> {{
               SubMinus[$CellContext`L][$CellContext`x], 
               Null}, {$CellContext`x, 
               StringJoin[
               "Infinite Rod, isotropic point, isotropic scattering, \
\!\(\*SubscriptBox[\(L\), \(-\)]\)[x], \[Alpha] = ", 
                ToString[$CellContext`\[Alpha]$$], 
                ", \!\(\*SubscriptBox[\(\[CapitalSigma]\), \(t\)]\) = ", 
                ToString[$CellContext`\[CapitalSigma]t$$]]}}, PlotRange -> 
            All]; $CellContext`plotLR$ = Show[
            
            ListPlot[$CellContext`plotpointsCR$, PlotRange -> All, PlotStyle -> 
             PointSize[0.01]], 
            Plot[
             
             infrodisopointisoscatter`LR[$CellContext`x, \
$CellContext`\[Alpha]$$, $CellContext`\[CapitalSigma]t$$], {$CellContext`x, \
-$CellContext`maxx$, $CellContext`maxx$}, PlotRange -> All], 
            Plot[
             
             infrodisopointisoscatter`\[Phi][$CellContext`x, $CellContext`\
\[Alpha]$$, $CellContext`\[CapitalSigma]t$$], {$CellContext`x, \
-$CellContext`maxx$, $CellContext`maxx$}, PlotRange -> All, PlotStyle -> 
             Dashed], Frame -> True, FrameLabel -> {{
               SubPlus[$CellContext`L][$CellContext`x], 
               Null}, {$CellContext`x, 
               StringJoin[
               "Infinite Rod, isotropic point, isotropic scattering, \
\!\(\*SubscriptBox[\(L\), \(+\)]\)[x], \[Alpha] = ", 
                ToString[$CellContext`\[Alpha]$$], 
                ", \!\(\*SubscriptBox[\(\[CapitalSigma]\), \(t\)]\) = ", 
                ToString[$CellContext`\[CapitalSigma]t$$]]}}, PlotRange -> 
            All]; Show[
           
           GraphicsGrid[{{$CellContext`plot\[Phi]$}, {$CellContext`plotLL$}, \
{$CellContext`plotLR$}}], ImageSize -> 500]], 
        Text[
        "Uh oh!  Couldn't find MC data.  Try to evaluate this entire notebook \
and ensure the data path is setup correctly."]], 
      "Specifications" :> {{{$CellContext`\[Alpha]$$, 0.7}, {0.1, 0.3, 0.5, 
         0.7, 0.9}}, {$CellContext`\[CapitalSigma]t$$, {1, 3}}}, 
      "Options" :> {}, "DefaultOptions" :> {}],
     ImageSizeCache->{545., {502., 507.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.61742928183463*^9, 3.6174293258331547`*^9}, 
   3.617429436318664*^9, {3.61742948106245*^9, 3.6174295009489727`*^9}, {
   3.617429549372438*^9, 3.617429598132875*^9}, {3.617429727942461*^9, 
   3.617429735895954*^9}, 3.617429800033937*^9, 3.617429832097906*^9, {
   3.617429874504074*^9, 3.617429882154498*^9}, 3.617429920022324*^9, {
   3.617429950258304*^9, 3.6174299799852943`*^9}, {3.6174300589071608`*^9, 
   3.617430117980332*^9}, {3.6174302282216253`*^9, 3.6174302706886377`*^9}, {
   3.617430871226499*^9, 3.6174309434694443`*^9}, 3.617431018710215*^9, {
   3.6174310600334377`*^9, 3.617431096079486*^9}, {3.61743174071297*^9, 
   3.61743178146768*^9}, 3.617431939072937*^9, {3.617432023877068*^9, 
   3.617432031820962*^9}, {3.617434265407374*^9, 3.6174342766717987`*^9}, {
   3.617434339799399*^9, 3.6174343511449547`*^9}, {3.617434565777495*^9, 
   3.617434585410145*^9}, 3.617434850608314*^9, 3.617435047387048*^9, 
   3.617779205752945*^9, {3.617847308432588*^9, 3.6178473273725863`*^9}, 
   3.6178480525007877`*^9, 3.617848167873561*^9, {3.617848523620203*^9, 
   3.617848532847191*^9}, 3.617848563566896*^9, 3.617898951835388*^9, 
   3.618026897361377*^9, 3.618035300220717*^9, 3.618035562256834*^9, 
   3.640929115385881*^9, 3.646256500631263*^9, 3.646256616522751*^9, 
   3.646262542820717*^9, 3.646270529303467*^9, {3.646270730167371*^9, 
   3.646270759502342*^9}, 3.646271305669959*^9, 3.646273049727674*^9, 
   3.646273085677771*^9, 3.646273376607019*^9, {3.646273413907319*^9, 
   3.646273429243236*^9}, 3.646273520972026*^9, 3.663892703650738*^9, 
   3.663892827583807*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Compare moments of \[Phi]", "Subsection",
 CellChangeTimes->{{3.617779269834346*^9, 3.617779274641601*^9}}],

Cell["\<\
Divide these results, which are collision density moments, by \
\[CapitalSigma]t to produce radiance/fluence moments:\
\>", "Text",
 CellChangeTimes->{{3.617847370274527*^9, 3.617847402120873*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Length", "[", "infrodisopointisoscatter`simulations", "]"}], 
      ">", "0"}], ",", "\[IndentingNewLine]", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "data", ",", "\[Phi]moments", ",", "ks", ",", "analytic", ",", "j", 
         ",", "nummoments"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"data", "=", 
         RowBox[{
          RowBox[{"SelectFirst", "[", 
           RowBox[{"infrodisopointisoscatter`simulations", ",", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"#", "[", 
                RowBox[{"[", "1", "]"}], "]"}], "\[Equal]", "\[Alpha]"}], "&&", 
              RowBox[{
               RowBox[{"#", "[", 
                RowBox[{"[", "2", "]"}], "]"}], "\[Equal]", 
               "\[CapitalSigma]t"}]}], "&"}]}], "]"}], "[", 
          RowBox[{"[", "3", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"nummoments", "=", 
         RowBox[{"data", "[", 
          RowBox[{"[", 
           RowBox[{"2", ",", "13"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"\[Phi]moments", "=", 
         FractionBox[
          RowBox[{"{", 
           RowBox[{"data", "[", 
            RowBox[{"[", "8", "]"}], "]"}], "}"}], "\[CapitalSigma]t"]}], ";",
         "\[IndentingNewLine]", 
        RowBox[{"ks", "=", 
         RowBox[{"{", 
          RowBox[{"Table", "[", 
           RowBox[{"k", ",", 
            RowBox[{"{", 
             RowBox[{"k", ",", "0", ",", 
              RowBox[{"nummoments", "-", "1"}]}], "}"}]}], "]"}], "}"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"analytic", "=", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"infrodisopointisoscatter`\[Phi]m", "[", 
            RowBox[{"\[Alpha]", ",", "\[CapitalSigma]t", ",", "k"}], "]"}], 
           ",", 
           RowBox[{"{", 
            RowBox[{"k", ",", "ks"}], "}"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"j", "=", 
         RowBox[{"Join", "[", 
          RowBox[{"ks", ",", "analytic", ",", "\[Phi]moments"}], "]"}]}], ";",
         "\[IndentingNewLine]", 
        RowBox[{"TableForm", "[", "\[IndentingNewLine]", 
         RowBox[{"Join", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{
             "\"\<k\>\"", ",", "\"\<analytic\>\"", ",", "\"\<MC\>\""}], "}"}],
             "}"}], ",", 
           RowBox[{"Transpose", "[", "j", "]"}]}], "]"}], 
         "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
     "Text", "[", 
      "\"\<Uh oh!  Couldn't find MC data.  Try to evaluate this entire \
notebook and ensure the data path is setup correctly.\>\"", "]"}]}], 
    "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\[Alpha]", ",", "0.5"}], "}"}], ",", 
     "infrodisopointisoscatter`alphas"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\[CapitalSigma]t", ",", "3"}], "}"}], ",", 
     "infrodisopointisoscatter`muts"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6177792806285133`*^9, 3.617779297336399*^9}, {
  3.617779343239357*^9, 3.6177794771281633`*^9}, {3.6177795098244753`*^9, 
  3.6177795247590523`*^9}, {3.617779555197104*^9, 3.617779656475761*^9}, {
  3.617779687007894*^9, 3.617779881109676*^9}, {3.617847356159178*^9, 
  3.617847361453464*^9}, {3.646256807605074*^9, 3.646256857829979*^9}, {
  3.646270829705825*^9, 3.6462708454917793`*^9}, {3.646270883711061*^9, 
  3.6462708887944107`*^9}, {3.646273144414405*^9, 3.646273149521007*^9}, {
  3.646273442789712*^9, 3.6462734443732862`*^9}, {3.66389284229492*^9, 
  3.6638928488735847`*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`\[Alpha]$$ = 
    0.5, $CellContext`\[CapitalSigma]t$$ = 3, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`\[Alpha]$$], 0.5}, {0.1, 0.3, 0.5, 0.7, 0.9}}, {{
       Hold[$CellContext`\[CapitalSigma]t$$], 3}, {1, 3}}}, Typeset`size$$ = {
    210., {88.134033203125, 93.865966796875}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = 
    True, $CellContext`\[Alpha]$23096$$ = 
    0, $CellContext`\[CapitalSigma]t$23097$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`\[Alpha]$$ = 
        0.5, $CellContext`\[CapitalSigma]t$$ = 3}, "ControllerVariables" :> {
        Hold[$CellContext`\[Alpha]$$, $CellContext`\[Alpha]$23096$$, 0], 
        Hold[$CellContext`\[CapitalSigma]t$$, \
$CellContext`\[CapitalSigma]t$23097$$, False]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      If[Length[infrodisopointisoscatter`simulations] > 0, 
        Module[{$CellContext`data$, $CellContext`\[Phi]moments$, \
$CellContext`ks$, $CellContext`analytic$, $CellContext`j$, \
$CellContext`nummoments$}, $CellContext`data$ = Part[
            SelectFirst[
            infrodisopointisoscatter`simulations, And[
             Part[#, 1] == $CellContext`\[Alpha]$$, 
              Part[#, 2] == $CellContext`\[CapitalSigma]t$$]& ], 
            3]; $CellContext`nummoments$ = 
          Part[$CellContext`data$, 2, 13]; $CellContext`\[Phi]moments$ = {
             
             Part[$CellContext`data$, 
              8]}/$CellContext`\[CapitalSigma]t$$; $CellContext`ks$ = {
            
            Table[$CellContext`k, {$CellContext`k, 
              0, $CellContext`nummoments$ - 1}]}; $CellContext`analytic$ = 
          Table[
            
            infrodisopointisoscatter`\[Phi]m[$CellContext`\[Alpha]$$, \
$CellContext`\[CapitalSigma]t$$, $CellContext`k], {$CellContext`k, \
$CellContext`ks$}]; $CellContext`j$ = 
          Join[$CellContext`ks$, $CellContext`analytic$, \
$CellContext`\[Phi]moments$]; TableForm[
           Join[{{"k", "analytic", "MC"}}, 
            Transpose[$CellContext`j$]]]], 
        Text[
        "Uh oh!  Couldn't find MC data.  Try to evaluate this entire notebook \
and ensure the data path is setup correctly."]], 
      "Specifications" :> {{{$CellContext`\[Alpha]$$, 0.5}, {0.1, 0.3, 0.5, 
         0.7, 0.9}}, {{$CellContext`\[CapitalSigma]t$$, 3}, {1, 3}}}, 
      "Options" :> {}, "DefaultOptions" :> {}],
     ImageSizeCache->{255., {144., 149.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.617779832588072*^9, {3.617779869376008*^9, 3.6177798817119627`*^9}, {
   3.6178473088352737`*^9, 3.617847330769167*^9}, 3.617847361723319*^9, 
   3.618026897603917*^9, 3.618035300457242*^9, 3.640929115543583*^9, 
   3.646256616780963*^9, 3.646256829637992*^9, 3.646261847614751*^9, 
   3.646262543199101*^9, 3.646270529820941*^9, 3.6462708469181356`*^9, 
   3.646270892928733*^9, 3.646271305834215*^9, 3.6462731524854717`*^9, 
   3.646273379011475*^9, 3.646273447508316*^9, 3.6462735213000393`*^9, 
   3.663892703861973*^9, 3.663892849265106*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["nth-collided moments of \[Phi]", "Subsection",
 CellChangeTimes->{{3.646256889082205*^9, 3.6462568938891897`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Length", "[", "infrodisopointisoscatter`simulations", "]"}], 
      ">", "0"}], ",", "\[IndentingNewLine]", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "data", ",", "\[Phi]moments", ",", "ks", ",", "analytic", ",", "j", 
         ",", "nummoments"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"data", "=", 
         RowBox[{
          RowBox[{"SelectFirst", "[", 
           RowBox[{"infrodisopointisoscatter`simulations", ",", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"#", "[", 
                RowBox[{"[", "1", "]"}], "]"}], "\[Equal]", "\[Alpha]"}], "&&", 
              RowBox[{
               RowBox[{"#", "[", 
                RowBox[{"[", "2", "]"}], "]"}], "\[Equal]", 
               "\[CapitalSigma]t"}]}], "&"}]}], "]"}], "[", 
          RowBox[{"[", "3", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"nummoments", "=", 
         RowBox[{"data", "[", 
          RowBox[{"[", 
           RowBox[{"2", ",", "13"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"\[Phi]moments", "=", 
         RowBox[{"N", "[", 
          FractionBox[
           RowBox[{"{", 
            RowBox[{"data", "[", 
             RowBox[{"[", 
              RowBox[{"10", "+", "n"}], "]"}], "]"}], "}"}], 
           "\[CapitalSigma]t"], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"ks", "=", 
         RowBox[{"{", 
          RowBox[{"Table", "[", 
           RowBox[{"k", ",", 
            RowBox[{"{", 
             RowBox[{"k", ",", "0", ",", 
              RowBox[{"nummoments", "-", "1"}]}], "}"}]}], "]"}], "}"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"analytic", "=", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"Quiet", "[", 
            RowBox[{"N", "[", 
             RowBox[{"infrodisopointisoscatter`\[Phi]m", "[", 
              RowBox[{
              "\[Alpha]", ",", "\[CapitalSigma]t", ",", "k", ",", "n"}], 
              "]"}], "]"}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"k", ",", "ks"}], "}"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"j", "=", 
         RowBox[{"Join", "[", 
          RowBox[{"ks", ",", "analytic", ",", "\[Phi]moments"}], "]"}]}], ";",
         "\[IndentingNewLine]", 
        RowBox[{"TableForm", "[", "\[IndentingNewLine]", 
         RowBox[{"Join", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{
             "\"\<k\>\"", ",", "\"\<analytic\>\"", ",", "\"\<MC\>\""}], "}"}],
             "}"}], ",", 
           RowBox[{"Transpose", "[", "j", "]"}]}], "]"}], 
         "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
     "Text", "[", 
      "\"\<Uh oh!  Couldn't find MC data.  Try to evaluate this entire \
notebook and ensure the data path is setup correctly.\>\"", "]"}]}], 
    "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\[Alpha]", ",", "0.7"}], "}"}], ",", 
     "infrodisopointisoscatter`alphas"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\[CapitalSigma]t", ",", "3"}], "}"}], ",", 
     "infrodisopointisoscatter`muts"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"n", ",", "8"}], "}"}], ",", 
     RowBox[{"Range", "[", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
        "NumberQ", "[", "infrodisopointisoscatter`numcollorders", "]"}], ",", 
        "infrodisopointisoscatter`numcollorders", ",", "1"}], "]"}], "]"}]}], 
    "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6462569332582083`*^9, 3.646256933399331*^9}, {
  3.646270902981992*^9, 3.646270933467203*^9}, {3.646273156352271*^9, 
  3.6462731715914907`*^9}, {3.646273451470543*^9, 3.646273453351191*^9}, {
  3.663892862814311*^9, 3.6638928855169687`*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`n$$ = 8, $CellContext`\[Alpha]$$ = 
    0.7, $CellContext`\[CapitalSigma]t$$ = 3, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`\[Alpha]$$], 0.7}, {0.1, 0.3, 0.5, 0.7, 0.9}}, {{
       Hold[$CellContext`\[CapitalSigma]t$$], 3}, {1, 3}}, {{
       Hold[$CellContext`n$$], 8}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
       14, 15, 16, 17, 18, 19, 20}}}, Typeset`size$$ = {
    218., {88.134033203125, 93.865966796875}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = 
    True, $CellContext`\[Alpha]$23431$$ = 
    0, $CellContext`\[CapitalSigma]t$23432$$ = False, $CellContext`n$23433$$ =
     0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`n$$ = 8, $CellContext`\[Alpha]$$ = 
        0.7, $CellContext`\[CapitalSigma]t$$ = 3}, "ControllerVariables" :> {
        Hold[$CellContext`\[Alpha]$$, $CellContext`\[Alpha]$23431$$, 0], 
        Hold[$CellContext`\[CapitalSigma]t$$, \
$CellContext`\[CapitalSigma]t$23432$$, False], 
        Hold[$CellContext`n$$, $CellContext`n$23433$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      If[Length[infrodisopointisoscatter`simulations] > 0, 
        Module[{$CellContext`data$, $CellContext`\[Phi]moments$, \
$CellContext`ks$, $CellContext`analytic$, $CellContext`j$, \
$CellContext`nummoments$}, $CellContext`data$ = Part[
            SelectFirst[
            infrodisopointisoscatter`simulations, And[
             Part[#, 1] == $CellContext`\[Alpha]$$, 
              Part[#, 2] == $CellContext`\[CapitalSigma]t$$]& ], 
            3]; $CellContext`nummoments$ = 
          Part[$CellContext`data$, 2, 13]; $CellContext`\[Phi]moments$ = N[{
              
              Part[$CellContext`data$, 
               10 + $CellContext`n$$]}/$CellContext`\[CapitalSigma]t$$]; \
$CellContext`ks$ = {
            
            Table[$CellContext`k, {$CellContext`k, 
              0, $CellContext`nummoments$ - 1}]}; $CellContext`analytic$ = 
          Table[
            Quiet[
             N[
              
              infrodisopointisoscatter`\[Phi]m[$CellContext`\[Alpha]$$, \
$CellContext`\[CapitalSigma]t$$, $CellContext`k, $CellContext`n$$]]], \
{$CellContext`k, $CellContext`ks$}]; $CellContext`j$ = 
          Join[$CellContext`ks$, $CellContext`analytic$, \
$CellContext`\[Phi]moments$]; TableForm[
           Join[{{"k", "analytic", "MC"}}, 
            Transpose[$CellContext`j$]]]], 
        Text[
        "Uh oh!  Couldn't find MC data.  Try to evaluate this entire notebook \
and ensure the data path is setup correctly."]], 
      "Specifications" :> {{{$CellContext`\[Alpha]$$, 0.7}, {0.1, 0.3, 0.5, 
         0.7, 0.9}}, {{$CellContext`\[CapitalSigma]t$$, 3}, {1, 
         3}}, {{$CellContext`n$$, 8}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 
         13, 14, 15, 16, 17, 18, 19, 20}}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{263., {158., 163.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.646261875042007*^9, 3.646262543277142*^9, 3.6462705298885937`*^9, 
   3.646270910345635*^9, 3.646271305912662*^9, 3.646273178387442*^9, 
   3.6462733793202343`*^9, 3.6462734581343927`*^9, 3.646273521369651*^9, 
   3.6638927039449453`*^9, {3.663892874037252*^9, 3.663892885789626*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["N-th order Radiance/Angular flux", "Subsection",
 CellChangeTimes->{{3.6178474490715647`*^9, 3.617847458534074*^9}, {
  3.617898905922576*^9, 3.617898912785017*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Length", "[", "infrodisopointisoscatter`simulations", "]"}], 
      ">", "0"}], ",", "\[IndentingNewLine]", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "data", ",", "nthL", ",", "nthR", ",", "numcollorders", ",", "LnR", 
         ",", "maxx", ",", "dx"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"data", "=", 
         RowBox[{
          RowBox[{"SelectFirst", "[", 
           RowBox[{"infrodisopointisoscatter`simulations", ",", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"#", "[", 
                RowBox[{"[", "1", "]"}], "]"}], "\[Equal]", "\[Alpha]"}], "&&", 
              RowBox[{
               RowBox[{"#", "[", 
                RowBox[{"[", "2", "]"}], "]"}], "\[Equal]", 
               "\[CapitalSigma]t"}]}], "&"}]}], "]"}], "[", 
          RowBox[{"[", "3", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"numcollorders", "=", 
         RowBox[{"data", "[", 
          RowBox[{"[", 
           RowBox[{"2", ",", "11"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"maxx", "=", 
         RowBox[{"data", "[", 
          RowBox[{"[", 
           RowBox[{"2", ",", "5"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"dx", "=", 
         RowBox[{"data", "[", 
          RowBox[{"[", 
           RowBox[{"2", ",", "7"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"nthL", "=", 
         RowBox[{"data", "[", 
          RowBox[{"[", 
           RowBox[{
            RowBox[{"10", "+", "numcollorders", "+", "1"}], ";;", 
            RowBox[{"10", "+", 
             RowBox[{"2", "numcollorders"}]}]}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"nthR", "=", 
         RowBox[{"data", "[", 
          RowBox[{"[", 
           RowBox[{
            RowBox[{"10", "+", 
             RowBox[{"2", " ", "numcollorders"}], "+", "2"}], ";;", 
            RowBox[{"-", "1"}]}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"Clear", "[", 
         RowBox[{"c", ",", "x"}], "]"}], ";", 
        RowBox[{"LnR", "=", 
         RowBox[{
          RowBox[{"SeriesCoefficient", "[", 
           RowBox[{
            RowBox[{"infrodisopointisoscatter`LR", "[", 
             RowBox[{"x", ",", "c", ",", "\[CapitalSigma]t"}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"c", ",", "0", ",", "n"}], "}"}]}], "]"}], 
          SuperscriptBox["\[Alpha]", "n"]}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"Show", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"ListPlot", "[", 
           RowBox[{
            RowBox[{"infrodisopointisoscatter`ppoints", "[", 
             RowBox[{
              RowBox[{"nthR", "[", 
               RowBox[{"[", 
                RowBox[{"n", "+", "1"}], "]"}], "]"}], ",", "dx", ",", "maxx",
               ",", "\[CapitalSigma]t"}], "]"}], ",", 
            RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
            RowBox[{"PlotStyle", "\[Rule]", 
             RowBox[{"PointSize", "[", ".01", "]"}]}]}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"Plot", "[", 
           RowBox[{"LnR", ",", 
            RowBox[{"{", 
             RowBox[{"x", ",", 
              RowBox[{"-", "maxx"}], ",", "maxx"}], "}"}], ",", 
            RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}], 
          "\[IndentingNewLine]", ",", 
          RowBox[{"Frame", "\[Rule]", "True"}], ",", "\[IndentingNewLine]", 
          RowBox[{"FrameLabel", "->", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                SubscriptBox["L", "+"], "[", "\"\<x|2\>\"", "]"}], ","}], 
              "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"x", ",", 
               RowBox[{
               "\"\<Infinite Rod, isotropic point, isotropic scattering, \!\(\
\*SubscriptBox[\(L\), \(+\)]\)[x|\>\"", "<>", 
                RowBox[{"ToString", "[", "n", "]"}], "<>", 
                "\"\<], \[Alpha] = \>\"", "<>", 
                RowBox[{"ToString", "[", "\[Alpha]", "]"}], "<>", 
                "\"\<, \!\(\*SubscriptBox[\(\[CapitalSigma]\), \(t\)]\) = \
\>\"", "<>", 
                RowBox[{"ToString", "[", "\[CapitalSigma]t", "]"}]}]}], 
              "}"}]}], "}"}]}], ",", 
          RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
          RowBox[{"ImageSize", "\[Rule]", "500"}]}], "\[IndentingNewLine]", 
         "]"}]}]}], "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
     
     RowBox[{
     "Text", "[", 
      "\"\<Uh oh!  Couldn't find MC data.  Try to evaluate this entire \
notebook and ensure the data path is setup correctly.\>\"", "]"}]}], 
    "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\[Alpha]", ",", "0.9"}], "}"}], ",", 
     "infrodisopointisoscatter`alphas"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\[CapitalSigma]t", ",", "1"}], "}"}], ",", 
     "infrodisopointisoscatter`muts"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"n", ",", "5"}], "}"}], ",", 
     RowBox[{"Range", "[", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
        "NumberQ", "[", "infrodisopointisoscatter`numcollorders", "]"}], ",", 
        "infrodisopointisoscatter`numcollorders", ",", "1"}], "]"}], "]"}]}], 
    "}"}]}], "]"}]], "Input",
 CellChangeTimes->{
  3.6462621975207987`*^9, 3.646262237309628*^9, {3.6462622779777737`*^9, 
   3.646262293471649*^9}, {3.6462713374758873`*^9, 3.646271363205092*^9}, {
   3.646271395987535*^9, 3.646271472045499*^9}, {3.646271621261757*^9, 
   3.646271621586891*^9}, {3.64627318621461*^9, 3.646273203454719*^9}, {
   3.6462734637623997`*^9, 3.646273465620475*^9}, {3.6638929052285557`*^9, 
   3.663892916189982*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`n$$ = 5, $CellContext`\[Alpha]$$ = 
    0.9, $CellContext`\[CapitalSigma]t$$ = 1, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`\[Alpha]$$], 0.9}, {0.1, 0.3, 0.5, 0.7, 0.9}}, {{
       Hold[$CellContext`\[CapitalSigma]t$$], 1}, {1, 3}}, {{
       Hold[$CellContext`n$$], 5}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
       14, 15, 16, 17, 18, 19, 20}}}, Typeset`size$$ = {500., {161., 166.}}, 
    Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = 
    True, $CellContext`\[Alpha]$34393$$ = 
    0, $CellContext`\[CapitalSigma]t$34394$$ = False, $CellContext`n$34395$$ =
     0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`n$$ = 5, $CellContext`\[Alpha]$$ = 
        0.9, $CellContext`\[CapitalSigma]t$$ = 1}, "ControllerVariables" :> {
        Hold[$CellContext`\[Alpha]$$, $CellContext`\[Alpha]$34393$$, 0], 
        Hold[$CellContext`\[CapitalSigma]t$$, \
$CellContext`\[CapitalSigma]t$34394$$, False], 
        Hold[$CellContext`n$$, $CellContext`n$34395$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      If[Length[infrodisopointisoscatter`simulations] > 0, 
        Module[{$CellContext`data$, $CellContext`nthL$, $CellContext`nthR$, \
$CellContext`numcollorders$, $CellContext`LnR$, $CellContext`maxx$, \
$CellContext`dx$}, $CellContext`data$ = Part[
            SelectFirst[
            infrodisopointisoscatter`simulations, And[
             Part[#, 1] == $CellContext`\[Alpha]$$, 
              Part[#, 2] == $CellContext`\[CapitalSigma]t$$]& ], 
            3]; $CellContext`numcollorders$ = 
          Part[$CellContext`data$, 2, 11]; $CellContext`maxx$ = 
          Part[$CellContext`data$, 2, 5]; $CellContext`dx$ = 
          Part[$CellContext`data$, 2, 7]; $CellContext`nthL$ = 
          Part[$CellContext`data$, 
            Span[
            10 + $CellContext`numcollorders$ + 1, 10 + 
             2 $CellContext`numcollorders$]]; $CellContext`nthR$ = 
          Part[$CellContext`data$, 
            Span[10 + 2 $CellContext`numcollorders$ + 2, -1]]; 
         Clear[$CellContext`c, $CellContext`x]; $CellContext`LnR$ = 
          SeriesCoefficient[
             
             infrodisopointisoscatter`LR[$CellContext`x, $CellContext`c, \
$CellContext`\[CapitalSigma]t$$], {$CellContext`c, 
              0, $CellContext`n$$}] $CellContext`\[Alpha]$$^$CellContext`n$$; 
         Show[
           ListPlot[
            infrodisopointisoscatter`ppoints[
             
             Part[$CellContext`nthR$, $CellContext`n$$ + 
              1], $CellContext`dx$, $CellContext`maxx$, $CellContext`\
\[CapitalSigma]t$$], PlotRange -> All, PlotStyle -> PointSize[0.01]], 
           
           Plot[$CellContext`LnR$, {$CellContext`x, -$CellContext`maxx$, \
$CellContext`maxx$}, PlotRange -> All], Frame -> True, FrameLabel -> {{
              SubPlus[$CellContext`L]["x|2"], Null}, {$CellContext`x, 
              StringJoin[
              "Infinite Rod, isotropic point, isotropic scattering, \
\!\(\*SubscriptBox[\(L\), \(+\)]\)[x|", 
               ToString[$CellContext`n$$], "], \[Alpha] = ", 
               ToString[$CellContext`\[Alpha]$$], 
               ", \!\(\*SubscriptBox[\(\[CapitalSigma]\), \(t\)]\) = ", 
               ToString[$CellContext`\[CapitalSigma]t$$]]}}, PlotRange -> All,
            ImageSize -> 500]], 
        Text[
        "Uh oh!  Couldn't find MC data.  Try to evaluate this entire notebook \
and ensure the data path is setup correctly."]], 
      "Specifications" :> {{{$CellContext`\[Alpha]$$, 0.9}, {0.1, 0.3, 0.5, 
         0.7, 0.9}}, {{$CellContext`\[CapitalSigma]t$$, 1}, {1, 
         3}}, {{$CellContext`n$$, 5}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 
         13, 14, 15, 16, 17, 18, 19, 20}}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{545., {230., 235.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.646262238476614*^9, {3.646262282968734*^9, 3.646262293901029*^9}, 
   3.646262543360508*^9, 3.646270529971002*^9, 3.6462713059959106`*^9, 
   3.646271481896624*^9, 3.646271622017563*^9, 3.6462732051177683`*^9, 
   3.646273379621744*^9, 3.646273469493635*^9, 3.646273521452129*^9, 
   3.6638927040266733`*^9, 3.663892916724312*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["N-th order Fluence / scalar flux", "Subsection",
 CellChangeTimes->{{3.617898988631413*^9, 3.617898994092989*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Length", "[", "infrodisopointisoscatter`simulations", "]"}], 
      ">", "0"}], ",", "\[IndentingNewLine]", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "data", ",", "nthL", ",", "nthR", ",", "numcollorders", ",", "maxx", 
         ",", "dx"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"data", "=", 
         RowBox[{
          RowBox[{"SelectFirst", "[", 
           RowBox[{"infrodisopointisoscatter`simulations", ",", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"#", "[", 
                RowBox[{"[", "1", "]"}], "]"}], "\[Equal]", "\[Alpha]"}], "&&", 
              RowBox[{
               RowBox[{"#", "[", 
                RowBox[{"[", "2", "]"}], "]"}], "\[Equal]", 
               "\[CapitalSigma]t"}]}], "&"}]}], "]"}], "[", 
          RowBox[{"[", "3", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"numcollorders", "=", 
         RowBox[{"data", "[", 
          RowBox[{"[", 
           RowBox[{"2", ",", "11"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"maxx", "=", 
         RowBox[{"data", "[", 
          RowBox[{"[", 
           RowBox[{"2", ",", "5"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"dx", "=", 
         RowBox[{"data", "[", 
          RowBox[{"[", 
           RowBox[{"2", ",", "7"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"nthL", "=", 
         RowBox[{"data", "[", 
          RowBox[{"[", 
           RowBox[{
            RowBox[{"10", "+", "numcollorders", "+", "1"}], ";;", 
            RowBox[{"10", "+", 
             RowBox[{"2", "numcollorders"}]}]}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"nthR", "=", 
         RowBox[{"data", "[", 
          RowBox[{"[", 
           RowBox[{
            RowBox[{"10", "+", 
             RowBox[{"2", " ", "numcollorders"}], "+", "2"}], ";;", 
            RowBox[{"-", "1"}]}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"Show", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"ListPlot", "[", 
           RowBox[{
            RowBox[{"infrodisopointisoscatter`ppoints", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"nthR", "[", 
                RowBox[{"[", 
                 RowBox[{"n", "+", "1"}], "]"}], "]"}], "+", 
               RowBox[{"nthL", "[", 
                RowBox[{"[", 
                 RowBox[{"n", "+", "1"}], "]"}], "]"}]}], ",", "dx", ",", 
              "maxx", ",", "\[CapitalSigma]t"}], "]"}], ",", 
            RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
            RowBox[{"PlotStyle", "\[Rule]", 
             RowBox[{"PointSize", "[", ".01", "]"}]}]}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"Plot", "[", 
           RowBox[{
            RowBox[{"infrodisopointisoscatter`\[Phi]", "[", 
             RowBox[{
             "x", ",", "n", ",", "\[Alpha]", ",", "\[CapitalSigma]t"}], "]"}],
             ",", 
            RowBox[{"{", 
             RowBox[{"x", ",", 
              RowBox[{"-", "maxx"}], ",", "maxx"}], "}"}], ",", 
            RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}], 
          "\[IndentingNewLine]", ",", 
          RowBox[{"Frame", "\[Rule]", "True"}], ",", "\[IndentingNewLine]", 
          RowBox[{"FrameLabel", "->", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"\[Phi]", "[", "\"\<x|7\>\"", "]"}], ","}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"x", ",", 
               RowBox[{
               "\"\<Infinite Rod, isotropic point, isotropic scattering, \
\[Phi][x|\>\"", "<>", 
                RowBox[{"ToString", "[", "n", "]"}], "<>", 
                "\"\<], \[Alpha] = \>\"", "<>", 
                RowBox[{"ToString", "[", "\[Alpha]", "]"}], "<>", 
                "\"\<, \!\(\*SubscriptBox[\(\[CapitalSigma]\), \(t\)]\) = \
\>\"", "<>", 
                RowBox[{"ToString", "[", "\[CapitalSigma]t", "]"}]}]}], 
              "}"}]}], "}"}]}], ",", 
          RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
          RowBox[{"ImageSize", "\[Rule]", "500"}]}], "\[IndentingNewLine]", 
         "]"}]}]}], "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
     
     RowBox[{
     "Text", "[", 
      "\"\<Uh oh!  Couldn't find MC data.  Try to evaluate this entire \
notebook and ensure the data path is setup correctly.\>\"", "]"}]}], 
    "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\[Alpha]", ",", "0.7"}], "}"}], ",", 
     "infrodisopointisoscatter`alphas"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\[CapitalSigma]t", ",", "infrodisopointisoscatter`muts"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"n", ",", "2"}], "}"}], ",", 
     RowBox[{"Range", "[", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
        "NumberQ", "[", "infrodisopointisoscatter`numcollorders", "]"}], ",", 
        "infrodisopointisoscatter`numcollorders", ",", "1"}], "]"}], "]"}]}], 
    "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.646262414938102*^9, 3.646262440976831*^9}, {
  3.6462624712005444`*^9, 3.6462624717430468`*^9}, {3.646271516211178*^9, 
  3.646271556135399*^9}, {3.646271602774489*^9, 3.646271605356247*^9}, {
  3.6462732095172043`*^9, 3.646273230609262*^9}, {3.646273473150647*^9, 
  3.6462734750845623`*^9}, {3.663892958087686*^9, 3.6638929629480953`*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`n$$ = 2, $CellContext`\[Alpha]$$ = 
    0.7, $CellContext`\[CapitalSigma]t$$ = 1, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`\[Alpha]$$], 0.7}, {0.1, 0.3, 0.5, 0.7, 0.9}}, {
      Hold[$CellContext`\[CapitalSigma]t$$], {1, 3}}, {{
       Hold[$CellContext`n$$], 2}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
       14, 15, 16, 17, 18, 19, 20}}}, Typeset`size$$ = {500., {161., 166.}}, 
    Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = 
    True, $CellContext`\[Alpha]$61590$$ = 
    0, $CellContext`\[CapitalSigma]t$61591$$ = False, $CellContext`n$61592$$ =
     0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`n$$ = 2, $CellContext`\[Alpha]$$ = 
        0.7, $CellContext`\[CapitalSigma]t$$ = 1}, "ControllerVariables" :> {
        Hold[$CellContext`\[Alpha]$$, $CellContext`\[Alpha]$61590$$, 0], 
        Hold[$CellContext`\[CapitalSigma]t$$, \
$CellContext`\[CapitalSigma]t$61591$$, False], 
        Hold[$CellContext`n$$, $CellContext`n$61592$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      If[Length[infrodisopointisoscatter`simulations] > 0, 
        Module[{$CellContext`data$, $CellContext`nthL$, $CellContext`nthR$, \
$CellContext`numcollorders$, $CellContext`maxx$, $CellContext`dx$}, \
$CellContext`data$ = Part[
            SelectFirst[
            infrodisopointisoscatter`simulations, And[
             Part[#, 1] == $CellContext`\[Alpha]$$, 
              Part[#, 2] == $CellContext`\[CapitalSigma]t$$]& ], 
            3]; $CellContext`numcollorders$ = 
          Part[$CellContext`data$, 2, 11]; $CellContext`maxx$ = 
          Part[$CellContext`data$, 2, 5]; $CellContext`dx$ = 
          Part[$CellContext`data$, 2, 7]; $CellContext`nthL$ = 
          Part[$CellContext`data$, 
            Span[
            10 + $CellContext`numcollorders$ + 1, 10 + 
             2 $CellContext`numcollorders$]]; $CellContext`nthR$ = 
          Part[$CellContext`data$, 
            Span[10 + 2 $CellContext`numcollorders$ + 2, -1]]; Show[
           ListPlot[
            infrodisopointisoscatter`ppoints[
            Part[$CellContext`nthR$, $CellContext`n$$ + 1] + 
             Part[$CellContext`nthL$, $CellContext`n$$ + 
               1], $CellContext`dx$, $CellContext`maxx$, $CellContext`\
\[CapitalSigma]t$$], PlotRange -> All, PlotStyle -> PointSize[0.01]], 
           Plot[
            
            infrodisopointisoscatter`\[Phi][$CellContext`x, $CellContext`n$$, \
$CellContext`\[Alpha]$$, $CellContext`\[CapitalSigma]t$$], {$CellContext`x, \
-$CellContext`maxx$, $CellContext`maxx$}, PlotRange -> All], Frame -> True, 
           FrameLabel -> {{
              $CellContext`\[Phi]["x|7"], Null}, {$CellContext`x, 
              StringJoin[
              "Infinite Rod, isotropic point, isotropic scattering, \
\[Phi][x|", 
               ToString[$CellContext`n$$], "], \[Alpha] = ", 
               ToString[$CellContext`\[Alpha]$$], 
               ", \!\(\*SubscriptBox[\(\[CapitalSigma]\), \(t\)]\) = ", 
               ToString[$CellContext`\[CapitalSigma]t$$]]}}, PlotRange -> All,
            ImageSize -> 500]], 
        Text[
        "Uh oh!  Couldn't find MC data.  Try to evaluate this entire notebook \
and ensure the data path is setup correctly."]], 
      "Specifications" :> {{{$CellContext`\[Alpha]$$, 0.7}, {0.1, 0.3, 0.5, 
         0.7, 0.9}}, {$CellContext`\[CapitalSigma]t$$, {1, 
         3}}, {{$CellContext`n$$, 2}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 
         13, 14, 15, 16, 17, 18, 19, 20}}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{545., {230., 235.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.646262472373905*^9, 3.6462625435769997`*^9, 
  3.646270530171324*^9, 3.646271306536333*^9, 3.6462715638213463`*^9, 
  3.646271605705817*^9, 3.646273232783436*^9, 3.64627338038947*^9, 
  3.646273477356885*^9, 3.646273521568759*^9, 3.663892704144945*^9, 
  3.6638929638469143`*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1092, 1124},
WindowMargins->{{147, Automatic}, {Automatic, 6}},
FrontEndVersion->"10.0 for Mac OS X x86 (32-bit, 64-bit Kernel) (December 4, \
2014)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 140, 1, 92, "Title"],
Cell[723, 25, 454, 9, 129, "Text"],
Cell[CellGroupData[{
Cell[1202, 38, 143, 2, 64, "Section"],
Cell[1348, 42, 253, 5, 30, "Text"],
Cell[1604, 49, 122, 2, 28, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1763, 56, 112, 1, 65, "Chapter"],
Cell[CellGroupData[{
Cell[1900, 61, 93, 1, 64, "Section"],
Cell[1996, 64, 216, 5, 68, "Text"],
Cell[2215, 71, 45589, 753, 84, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[47841, 829, 105, 1, 64, "Section"],
Cell[CellGroupData[{
Cell[47971, 834, 133, 1, 44, "Subsection"],
Cell[48107, 837, 813, 23, 65, "Input"],
Cell[48923, 862, 782, 22, 65, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[49742, 889, 97, 1, 44, "Subsection"],
Cell[49842, 892, 588, 16, 54, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[50467, 913, 109, 1, 44, "Subsection"],
Cell[50579, 916, 967, 29, 69, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[51583, 950, 95, 1, 44, "Subsection"],
Cell[51681, 953, 811, 23, 48, "Input"],
Cell[52495, 978, 1004, 29, 48, "Input"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[53548, 1013, 197, 3, 64, "Section"],
Cell[53748, 1018, 999, 29, 46, "Input"],
Cell[54750, 1049, 478, 10, 46, "Input"],
Cell[55231, 1061, 1339, 34, 114, "Input"],
Cell[CellGroupData[{
Cell[56595, 1099, 371, 9, 28, "Input"],
Cell[56969, 1110, 514, 9, 28, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[57520, 1124, 367, 9, 28, "Input"],
Cell[57890, 1135, 446, 8, 28, "Output"]
}, Open  ]],
Cell[58351, 1146, 476, 11, 28, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[58864, 1162, 115, 1, 64, "Section"],
Cell[CellGroupData[{
Cell[59004, 1167, 112, 1, 44, "Subsection"],
Cell[CellGroupData[{
Cell[59141, 1172, 12795, 273, 947, "Input"],
Cell[71939, 1447, 8645, 158, 1026, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[80633, 1611, 113, 1, 44, "Subsection"],
Cell[80749, 1614, 207, 4, 30, "Text"],
Cell[CellGroupData[{
Cell[80981, 1622, 3946, 95, 387, "Input"],
Cell[84930, 1719, 3915, 76, 310, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[88894, 1801, 120, 1, 44, "Subsection"],
Cell[CellGroupData[{
Cell[89039, 1806, 4144, 106, 404, "Input"],
Cell[93186, 1914, 4114, 81, 338, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[97349, 2001, 171, 2, 44, "Subsection"],
Cell[CellGroupData[{
Cell[97545, 2007, 6122, 149, 464, "Input"],
Cell[103670, 2158, 5070, 96, 482, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[108789, 2260, 120, 1, 44, "Subsection"],
Cell[CellGroupData[{
Cell[108934, 2265, 5763, 140, 437, "Input"],
Cell[114700, 2407, 4809, 91, 482, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
